name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules

jobs:
  # Code Quality and Testing
  test:
    name: Test & Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run type checking
        run: pnpm run type-check
        
      - name: Run linting
        run: pnpm run lint
        
      - name: Run tests
        run: pnpm run test:coverage
        
      - name: Upload coverage to Codecov
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload coverage reports
        if: matrix.node-version == 18
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage/

  # Build and Package
  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build extension
        run: pnpm run build
        
      - name: Create extension package
        run: pnpm run zip
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extension-build
          path: |
            dist/
            cookie-copier-extension.zip
          retention-days: 30

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit --audit-level moderate
        
      - name: Run dependency vulnerability check
        run: npx audit-ci --moderate

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: extension-build
          
      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|---------|" >> $GITHUB_STEP_SUMMARY
          cd dist
          for file in *.js *.css; do
            if [ -f "$file" ]; then
              size=$(wc -c < "$file" | numfmt --to=iec)
              gzipped=$(gzip -c "$file" | wc -c | numfmt --to=iec)
              echo "| $file | $size | $gzipped |" >> $GITHUB_STEP_SUMMARY
            fi
          done

  # Release (only on release creation)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build extension
        run: pnpm run build
        
      - name: Create extension package
        run: pnpm run zip
        
      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./cookie-copier-extension.zip
          asset_name: cookie-copier-v${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

  # Deployment (for Chrome Web Store - requires manual setup)
  deploy:
    name: Deploy to Chrome Web Store
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: extension-build
          
      - name: Deploy to Chrome Web Store
        # This would require setting up Chrome Web Store API credentials
        # and using a tool like chrome-webstore-upload-cli
        run: |
          echo "Chrome Web Store deployment would go here"
          echo "Requires CHROME_EXTENSION_ID, CHROME_CLIENT_ID, CHROME_CLIENT_SECRET, and CHROME_REFRESH_TOKEN"
          echo "Package ready for manual upload: cookie-copier-extension.zip"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test, build, security, performance]
    if: always()
    
    steps:
      - name: Cleanup artifacts
        uses: geekyeggo/delete-artifact@v2
        if: github.event_name == 'pull_request'
        with:
          name: |
            extension-build
            coverage-reports
          failOnError: false